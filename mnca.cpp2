#include <raylib.h>

#include <thread>
#include <mutex>
#include <shared_mutex>

#include "types.h2"
#include "config.h2"

Cell: type = {
  public position: vec2<float> = (0.0f, 0.0f);
  public velocity: vec2<float> = (0.0f, 0.0f);

  color_num: u8 = 0;
  cell_iter_index: u32 = 0;

  operator=: (out this, move other) = {
    position = other.position;
    velocity = other.velocity;
    color_num = other.color_num;
    cell_iter_index = other.cell_iter_index;
  }

  operator=: (out this, new_x: float, new_y: float, config: Config) = {
    position = vec2<float>(new_x, new_y);
    color_num = random_value<u8>(0 as u8, config.colors_number - 1);
  }

  update: (inout this, in config: Config) = {
    friction := 0.8f;
    gravity := 0.0f;

    vx := velocity.x.load();
    vy := velocity.y.load();

    vx *= friction;
    vy *= friction;
    vy += gravity;

    vel_len := std::sqrt(vx * vx + vy * vy);
    max_vel_len : const _ = 1.0f;
    if vel_len > max_vel_len {
      vx *= max_vel_len / vel_len;
      vy *= max_vel_len / vel_len;
    }

    px := position.x.load();
    py := position.y.load();

    cell_counter := 0; while cell_counter < cells.ssize() / 4 next cell_counter += 1 {
      other : *Cell = std::addressof(cells.at(cell_iter_index));
      cell_iter_index = (cell_iter_index + 1) % cells.size();

      if this& == other {
        continue;
      }

      other_px := other*.position.x.load();
      other_py := other*.position.y.load();

      dx := other_px - px;
      dy := other_py - py;

      dx = std::fmod(dx + 1.5f * window_width, window_width) - 0.5f * window_width;
      dy = std::fmod(dy + 1.5f * window_height, window_height) - 0.5f * window_height;

      dist := std::sqrt(dx * dx + dy * dy);

      if dist < 0.001f || dist > 90.0f {
        continue;
      }

      dist2 := dist * dist;

      sfx := dx / (dist2);
      sfy := dy / (dist2); 

      separation_max : const _ = 0.4f;
      sfx = std::clamp(sfx, -separation_max, separation_max);
      sfy = std::clamp(sfy, -separation_max, separation_max);

      vx -= sfx;
      vy -= sfy;

      damping := 0.9f;
      force := config.attraction_matrix[color_num][other*.color_num] / damping;
      fx := (dx / dist2) * force;
      fy := (dy / dist2) * force;

      force_max : const _ = 0.5f;
      fx = std::clamp(fx, -force_max, force_max);
      fy = std::clamp(fy, -force_max, force_max);
          
      vx += fx;
      vy += fy;
    }

    px += vx;
    py += vy;

    if px < 0 {
      px += window_width;
    }

    if px > window_width {
      px -= window_width;
    }

    if py < 0 {
      py += window_height;
    }

    if py > window_height {
      py -= window_height;
    }

    position.x.store(px);
    position.y.store(py);
  }

  draw: (in this, in config: Config) = {
    color := config.all_colors[color_num];
    DrawCircle(position.x, position.y, 3.0f, color);
  }
}

cells: std::vector<Cell> = ();

window_width: int = 1080;
window_height: int = 720;

running: std::atomic<bool> = true;

create_random_cell: (config: Config) -> Cell = {
  rw := cpp2::unsafe_narrow<float>(GetRandomValue(0, window_width));
  rh := cpp2::unsafe_narrow<float>(GetRandomValue(0, window_height));
  return Cell(rw as float, rh as float, config);
}

update_cells : (from: ssize_t, to: ssize_t, config: Config) -> void = {
  while (running)
  {
    i := from; while i < to next i += 1 {
      cells[i].update(config);
    }

    std::this_thread::sleep_for(std::chrono::milliseconds(0));
  }
}

window_name : const std::string_view == "Hello, cppfront!";
max_cells : const u64 == 65536;

main: () = {
  InitWindow(window_width, window_height, window_name.data());
  SetTargetFPS(170);

  config := Config();
  gui := GUI();

  config.attraction_matrix = config.generate_attraction_matrix(config.colors_number);

  std::cout << "Window title is '(window_name)$'.\n";
  std::cout << "Size of a cell is (sizeof(Cell))$ bytes.\n";

  cells.reserve(max_cells);
  cell_num := 1000; while cell_num > 0 next cell_num -= 1 {    
    cells.push_back(create_random_cell(config));
  }

  frame: u64 = 0;
  num_threads : const _ = std::max(1 as ssize_t, std::thread::hardware_concurrency() - 1 as ssize_t);
  threads: std::vector<std::thread> = ();
  threads_cells : u64 = 0;

  delegate_threads := :() = {
    running&$* = true;
    i := 0 as ssize_t; while i < num_threads$ next i += 1 {
      cells_size := cells&$*.ssize();
      from := (cells_size / num_threads$) * i;
      to := (cells_size / num_threads$) * (i + 1);
      if i == num_threads$ - 1 {
        to = cells_size;
      }

      threads&$*.push_back(std::thread(update_cells, from, to, config$));

      threads_cells&$* = cells_size;
    }
  };

  stop_threads := :() = {
    running&$* = false;
    for threads&$* do (inout thread) {
      thread.join();
    }
    threads&$*.clear();
  };

  if (num_threads > 0)
  {
    delegate_threads();
  }

  while !WindowShouldClose()
  {
    frame += 1;

    if (num_threads == 0)
    {
      for cells do (inout cell)
      {
        cell.update(config);
      }
    }

    if (frame % 10000 == 0)
    {
      for cells do (in cell)
      {
        cell.print_xy();
      }
    }

    window_width = GetRenderWidth();
    window_height = GetRenderHeight();

    if cells.size() < max_cells
    {
      if IsKeyDown(KEY_R) || IsKeyDown(KEY_SPACE)
      {
        cells.push_back(create_random_cell(config));
      }

      if IsMouseButtonDown(MOUSE_BUTTON_RIGHT)
      {
        mx := GetMouseX();
        my := GetMouseY();
        cell := Cell(mx, my, config);
        cells.push_back(cell);
      }
      
      if threads_cells != cells.size()
      {
        stop_threads();
        delegate_threads();
      }
    }

    BeginDrawing();
    DrawRectangle(0, 0, window_width, window_height, ColorAlpha(BLACK, 0.1f));
    //DrawRectangle(0, 0, window_width, window_height, BLACK);

    for cells do (in cell) {
      cell.draw(config);
    }
    gui.draw(config);

    EndDrawing();
  }
  
  stop_threads();

  CloseWindow();
}

print_xy: (cell: Cell) = {
  std::cout << "cell.position = " << cell.position << "\n";
}
