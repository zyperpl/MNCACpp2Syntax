#include "types.h2"

#include <raylib.h>
#include <raymath.h>

#include "config.h2"

extern Font load_font();

GUI : type = {
  font : const Font = load_font();
  font_size : u64 = 18;
  text_spacing : u64 = 0;
  
  private element_x : float = 0.0f;
  private element_y : float = 0.0f;
  private element_counter : u64 = 0;
  private active : u64 = 0;
  private hover : u64 = 0;

  private show_board : bool = true;
  private board_start_x : float = 0.0f;
  private board_start_y : float = 0.0f;
  private board_size : const float = 44.0f;

  private show_attraction_slider : bool = false;
  private attraction_slider_index_x : u8 = 0;
  private attraction_slider_index_y : u8 = 0;
  private attraction_button_rect : Rectangle = Rectangle(0, 0, 0, 0);

  private previous_time : float = 0.0f;
  private last_move_time : float = 0.0f;
  private previous_mouse_position : Vector2 = Vector2(0.0f, 0.0f);
  private hud_hide_time_max : const float = 2.0f;
  private layout_show_x : const float = 8.0f;
  private layout_hide_x : const float = -1200.0f;
  private layout_x : float = 8.0f;
  private layout_y : const float = 4.0f;

  public draw_text : (in this, 
                      in text: std::string_view, 
                      copy rect: Rectangle, 
                      justification: TextJustification, 
                      color: Color) = {

    text_size := MeasureTextEx(font, text.data(), font_size, text_spacing);

    if justification == TextJustification::Center { rect.x += rect.width / 2 - text_size.x / 2; }
    if justification == TextJustification::Right  { rect.x += rect.width - text_size.x; }

    rect.y += rect.height / 2 - text_size.y / 2;
  
    DrawTextEx(font, text.data(), Vector2(rect.x + 1, rect.y + 1), font_size, text_spacing, ColorBrightness(color, -0.5f));
    DrawTextEx(font, text.data(), Vector2(rect.x, rect.y), font_size, text_spacing, color);
  }

  public draw : (inout this, inout config: Config) = {
    current_time := GetTime();
    previous_time = current_time;

    mouse_position := GetMousePosition();
    mouse_delta := Vector2Subtract(mouse_position, previous_mouse_position);
    previous_mouse_position = mouse_position;
    if Vector2Length(mouse_delta) > 0.01f || IsMouseButtonDown(main_mouse_button) {
      last_move_time = current_time;
    }
    if last_move_time + hud_hide_time_max < current_time {
      layout_x = Lerp(layout_x, layout_hide_x, 0.27f);
    }
    else {
      layout_x = Lerp(layout_x, layout_show_x, 0.46f);
    }

    begin_frame();
    start_layout(layout_x, layout_y);

    if button("Show board", 11 * 12, 11 * 5, default_button_color)
    {
      show_board = !show_board;
    }

    if show_board
    {
      board_start_x = Lerp(board_start_x, element_x, 0.07f);
    } 
    else
    {
      board_start_x = Lerp(board_start_x, -board_size * config.colors_number * 2.0f, 0.05f);
      show_attraction_slider = false;
    }
    draw_board(config);

    if show_attraction_slider {
      slider_rect := attraction_button_rect;
      
      slider_rect.x += layout_x;
      slider_rect.x += 11.0f * 4.0f;
      slider_rect.x = std::roundf(slider_rect.x);
      slider_rect.width = 11.0f * 4.0f;

      slider_rect.y += layout_y;
      slider_rect.y -= 11.0f * 4.0f;
      slider_rect.height += 11.0f * 8.0f;

      previous_value : const _ = config.get_attraction(attraction_slider_index_y, attraction_slider_index_x);
      new_value := slider(slider_rect, previous_value, -1.0f, 1.0f);

      if previous_value != new_value {
        config.set_attraction(attraction_slider_index_y, attraction_slider_index_x, new_value);
      }
    }

    end_frame();
  }

  private main_mouse_button : int == MOUSE_LEFT_BUTTON;
  private is_mouse_pressed : () -> bool = IsMouseButtonPressed(main_mouse_button);
  private is_mouse_released : () -> bool = IsMouseButtonReleased(main_mouse_button);
  private get_mouse_position : () -> Vector2 = GetMousePosition();
  private mouse_in_rect : (in rect: Rectangle) -> bool = CheckCollisionPointRec(get_mouse_position(), rect);
  private default_button_color : Color == Color(110, 110, 110, 255);

  private is_active : (in this, id: u64) -> bool = active == id;
  private set_active : (inout this, in id: u64) = active = id;
  private is_hover : (in this, id: u64) -> bool = hover == id;
  private set_hover : (inout this, in id: u64) = hover = id;
  private advance_element_counter : (inout this) = element_counter += 1;

  private begin_frame : (inout this) = {
    element_x = 0.0f;
    element_y = 0.0f;
    element_counter = 0;
    hover = 0;
  }

  private end_frame : (inout this) = {
    if is_mouse_released() { 
      active = 0;
    }
  }

  private start_layout : (inout this, x : float, y : float) = {
    element_x = x;
    element_y = y;
  }

  private draw_board : (inout this, inout config: Config) = {
    advance_element_counter();

    size: const _ = board_size;
    board_start_y = element_y;

    start_x : const _ = std::roundf(board_start_x);
    start_y : const _ = std::roundf(board_start_y);

    iy : u8 = 0; while iy < config.colors_number next iy++
    {
      DrawRectangle(start_x + -1, start_y + (iy + 1) * size, size, size, config.all_colors[iy]);
      DrawRectangle(start_x + (iy + 1) * size, start_y + -1, size, size, config.all_colors[iy]);
      ix : u8 = 0; while ix < config.colors_number next ix++
      {
        x := start_x + ix * size;
        y := start_y + iy * size;
        attraction := config.attraction_matrix[iy][ix];
        color := ColorBrightness(RED, 1.0f - attraction);
        if attraction < 0.0f {
          color = ColorBrightness(BLUE, 1.0f - (-attraction));
        }
        DrawRectangle(x + size, y + size, size, size, color); 
        text: const _ = TextFormat("%.02f", attraction);
        before_element_x := element_x;
        before_element_y := element_y;
        element_x = x + size;
        element_y = y + size;
        if button(text, size, size, color) && show_board
        {
          if show_attraction_slider && attraction_slider_index_x == ix && attraction_slider_index_y == iy {
            show_attraction_slider = false;
          }
          else {
            attraction_slider_index_x = ix;
            attraction_slider_index_y = iy;
            show_attraction_slider = true;
            attraction_button_rect = Rectangle(x + size, y + size, size, size);
          }
        }

        if mouse_in_rect(Rectangle(x + size, y + size, size, size)) {
          if GetMouseWheelMoveV().y > 0 {
            val := config.get_attraction(iy, ix);
            config.set_attraction(iy, ix, val + 0.01f);
          }
          if GetMouseWheelMoveV().y < 0 {
            val := config.get_attraction(iy, ix);
            config.set_attraction(iy, ix, val - 0.01f);
          }
        }

        element_x = before_element_x;
        element_y = before_element_y;
      }
        
      element_y += size;
    }
  }

  private button : (inout this, in text: std::string_view, width: i32, height: i32, copy color : Color) -> bool = {
    advance_element_counter();
    my_hash : u64 = hash(element_counter, text);
    rect := Rectangle(element_x, element_y, width, height);
    border_rect := Rectangle(rect.x - 2.0f, rect.y - 2.0f, rect.width + 4.0f, rect.height + 4.0f);
    enable_hover(my_hash, rect);

    text_color := Color(255, 255, 255, 255);
    border_color := Color(0, 0, 0, 155);

    if is_hover(my_hash) { 
      color = Color(130, 130, 130, 255);
      border_color = Color(20, 20, 20, 155);
      text_color = Color(250, 250, 255, 255);

      border_rect.y += 1.0f;
    }
    if is_active(my_hash) {
      color = Color(90, 90, 90, 255);
      text_color = Color(240, 240, 250, 255);

      if mouse_in_rect(rect) {            
        border_color = Color(40, 40, 50, 155);
        rect.y += 1.0f;
        border_rect.y += 1.0f;
      }
    }

    roundness := 0.5f;
    segments := 16;

    DrawRectangleRounded(border_rect, roundness, segments, border_color);
    DrawRectangleRounded(rect, roundness, segments, color);
    draw_text(text, rect, TextJustification::Center, text_color);
    element_y += rect.height + 8.0f;

    return check_active_rect_pressed(my_hash, rect);
  }

  slider : (inout this, copy rect: Rectangle, copy value : float, min_value : float, max_value : float) -> float = {
    advance_element_counter();
    my_hash : u64 = hash(element_counter, "slider");
    enable_hover(my_hash, rect);
    _ = check_active_rect_pressed(my_hash, rect);

    color := Color(55, 55, 55, 255);
    border_color := Color(120, 120, 120, 255);

    if is_hover(my_hash) { 
      border_color = Color(20, 20, 20, 255);
      color = Color(75, 75, 75, 255);
    }
    if is_active(my_hash) {
      border_color = Color(40, 40, 50, 255);
      color = Color(140, 140, 140, 255);

      mouse_y := get_mouse_position().y;
      new_value := Lerp(min_value, max_value, 1.0f - (mouse_y - rect.y) / rect.height);
      new_value = Clamp(new_value, min_value, max_value);

      value = new_value;
    }

    roundness := 0.5f;
    segments := 16;

    tri_w := 12.0f;
    tri_h := 18.0f;

    rect.x += tri_w + 1.0f;
    DrawRectangleRounded(Rectangle(rect.x - 2.0f, rect.y - 2.0f, rect.width + 4.0f, rect.height + 4.0f), roundness, segments, border_color);
    DrawTriangle(Vector2(rect.x + 4.0f, rect.y + rect.height / 2.0f - tri_h / 2.0f - 4.0f),
                 Vector2(rect.x - tri_w - 4.0f, rect.y + rect.height / 2.0f),
                 Vector2(rect.x + 4.0f, rect.y + rect.height / 2.0f + tri_h / 2.0f + 4.0f), border_color);
    DrawTriangle(Vector2(rect.x, rect.y + rect.height / 2.0f - tri_h / 2.0f),
                 Vector2(rect.x - tri_w, rect.y + rect.height / 2.0f),
                 Vector2(rect.x, rect.y + rect.height / 2.0f + tri_h / 2.0f), color);
    DrawRectangleRounded(rect, roundness, segments, color);

    dial_color := ColorBrightness(color, 0.6f);
    dial_height := 4.0f;

    ratio := (value - min_value) / (max_value - min_value);
    dial_y := rect.height - rect.height * ratio - dial_height * 0.5f;
    dial_y = std::roundf(dial_y);

    if ratio < 0.0f || ratio > 1.0f {
      dial_color = Color(255, dial_color.g, dial_color.b, 255);
    }

    dial_rect := Rectangle(rect.x, rect.y + dial_y, rect.width, dial_height);
    DrawRectangleRounded(dial_rect, roundness, segments, dial_color);

    return value;
  }

  private enable_hover : (inout this, in id: u64, in rect : Rectangle) = {
    if mouse_in_rect(rect) && active == 0
    {
      set_hover(id);
    }
  }

  private check_active_rect_pressed : (inout this, in id : u64, in rect : Rectangle) -> bool = {
    if mouse_in_rect(rect)
    {
      if is_active(id) && is_mouse_released()
      {
        return true;
      }
      else if is_mouse_pressed()
      {
        set_active(id);
      }
    }

    return false;
  }

  private hash : (text : std::string_view) -> u64 = std::hash<std::string_view>()(text);
  private hash : (a : u64, b : std::string_view) -> u64 = std::hash<std::string_view>()(b) + a;
}
